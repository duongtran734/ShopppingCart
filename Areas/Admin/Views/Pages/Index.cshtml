@model IEnumerable<Page>

@{
    ViewData["Title"] = "Index";
}
<div>
    <partial name="_SuccessNotificationPartial" />
</div>

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table sorting" id="pages">
    <thead>
        <tr class="page_home">
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Slug)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr id="id_@item.Id" class="@item.Slug">
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Slug)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                    @if (item.Title != "Home")
                    {
                        <span style="color:black;">|</span>
                        <a class="confirmDeletion" asp-action="Delete" asp-route-id="@item.Id"> Delete</a>

                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    @{await Html.RenderPartialAsync("_PagesIndexView");}

    <script>
        $("table#pages tbody").sortable({
            items: "tr:not(.home)",
            placeholder: "sortable-placeholder",
            update: function (event, ui) {
                let ids = $("table#pages tbody").sortable("serialize"); //serialize the data to post with jquery.post
                let url = "/admin/pages/reorder";

                console.log(ids);
                //make an ajax jquery.post request so that we can update the order to the database
 
                $.post(url, ids);
            }
        });
    </script>
}

