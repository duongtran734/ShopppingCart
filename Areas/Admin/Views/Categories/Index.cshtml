@model IEnumerable<ShopppingCart.Models.Category>

@{
    ViewData["Title"] = "Categories";
}

<div>
    <partial name="_SuccessNotificationPartial" />
</div>

<h1>Categories</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table sorting " id="Categories">
    <thead>
        <tr class="home">
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Slug)
            </th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr id="id_@item.Id" class="@item.Slug">
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Slug)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a class="confirmDeletion" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
        }
    </tbody>
</table>

@section Scripts {

    @{await Html.RenderPartialAsync("_PagesIndexView");}

    <!--For sorting-->
    <script>
            $("table#Categories tbody").sortable({
                placeholder: "sortable-placeholder",
                update: function (event, ui) {
                    let ids = $("table#Categories tbody").sortable("serialize"); //serialize the data to post with jquery.post
                    let url = "/admin/categories/reorder";

                    console.log(ids);
                    //make an ajax jquery.post request so that we can update the order to the database

                    $.post(url, ids);
                }
            });
    </script>
}

